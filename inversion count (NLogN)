void inv1(long long a[],long long s,long long e, long long  &res)
{
    
    int mid=(s+e)/2;
    int i=s,j=mid+1,k=s;
    long long temp[s+e+1];
    while(i<=mid&&j<=e)
    {
        if(a[i]<=a[j])
        {
            temp[k++]=a[i++];
        }
        else{
            res+=(mid-i+1);
            temp[k++]=a[j++];
        }
    }
    while(i<=mid)
        temp[k++]=a[i++];
    while(j<=e)
        temp[k++]=a[j++];
    for(int i=s;i<=e;i++)
        a[i]=temp[i];
}
void inv(long long a[],long long s,long long e,long long &res)
{
    long long mid=(s+e)/2;
    if(s>=e) return;
    inv(a,s,mid,res);
    inv(a,mid+1,e,res);
    
    inv1(a,s,e,res);
    
}
long long int inversionCount(long long arr[], long long n)
{
    // Your Code Here
    long long res=0,s=0,e=n-1;
    inv(arr,s,e,res);
    return res;
}
